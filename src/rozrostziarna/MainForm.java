package rozrostziarna;

import BoundaryConditions.Absorbing;
import BoundaryConditions.BC;
import BoundaryConditions.Periodic;
import Neighbourhood.Moore;
import Neighbourhood.VonNeumann;
import java.awt.BorderLayout;
import java.awt.Color;
import static java.awt.Color.WHITE;
import static java.awt.Color.black;
import static java.awt.Color.white;
import java.awt.Component;
import java.awt.Container;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.System.arraycopy;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

@SuppressWarnings("deprecation")
public class MainForm extends javax.swing.JFrame {

    final int WIDTH = 300;
    final int HEIGHT = 300;
    boolean isMonteCarloStarted;

    Color[][] array = new Color[WIDTH][HEIGHT];
    Color[][] tab;
    Random rnd = new Random();
    boolean isThreadAlive = false;
    boolean isThreadStarted = true;
    NaiveGrowth ng;
    Thread t1;
    Thread t2;
    Thread t3;
    static Color dominantColor;
    boolean isAfterRec = false;
    public static int[][] tempTab;
    private int[][] bC;
    

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        claerArray();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boundaryConditions = new javax.swing.ButtonGroup();
        neighbourhood = new javax.swing.ButtonGroup();
        jPanel1 = new PicturePanel();
        jLabel1 = new javax.swing.JLabel();
        tbxCount = new javax.swing.JTextField();
        btnRandom = new javax.swing.JButton();
        btnRegular = new javax.swing.JButton();
        btnRadius = new javax.swing.JButton();
        rbtnPeriodic = new javax.swing.JRadioButton();
        rbtnAbsorbing = new javax.swing.JRadioButton();
        rbtnVonNeumann = new javax.swing.JRadioButton();
        rbtnMoore = new javax.swing.JRadioButton();
        btnStart = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSavePicture = new javax.swing.JButton();
        btnImportPicture = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        perecentMoore = new javax.swing.JTextField();
        rbtnCircle = new javax.swing.JRadioButton();
        jbtnBeforeInc = new javax.swing.JButton();
        jbtnAfterInc = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        countInclusions = new javax.swing.JTextField();
        btnStartMoore = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnBoundary = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setMaximumSize(new java.awt.Dimension(300, 300));
        jPanel1.setMinimumSize(new java.awt.Dimension(300, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );

        jLabel1.setText("How many:");

        btnRandom.setText("Random");
        btnRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomActionPerformed(evt);
            }
        });

        btnRegular.setText("Regular");
        btnRegular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegularActionPerformed(evt);
            }
        });

        btnRadius.setText("Radius");
        btnRadius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRadiusActionPerformed(evt);
            }
        });

        boundaryConditions.add(rbtnPeriodic);
        rbtnPeriodic.setText("Periodic");

        boundaryConditions.add(rbtnAbsorbing);
        rbtnAbsorbing.setText("Absorbing");

        neighbourhood.add(rbtnVonNeumann);
        rbtnVonNeumann.setText("Von Neumann");

        neighbourhood.add(rbtnMoore);
        rbtnMoore.setText("Moore");

        btnStart.setText("START");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnClear.setText("CLEAR");
        btnClear.setToolTipText("");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnSavePicture.setText("Save as");
        btnSavePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePictureActionPerformed(evt);
            }
        });

        btnImportPicture.setText("Import");
        btnImportPicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportPictureActionPerformed(evt);
            }
        });

        jLabel2.setText("%");

        perecentMoore.setText("10");

        rbtnCircle.setText("Circle");

        jbtnBeforeInc.setText("Before");
        jbtnBeforeInc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBeforeIncActionPerformed(evt);
            }
        });

        jbtnAfterInc.setText("After");
        jbtnAfterInc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAfterIncActionPerformed(evt);
            }
        });

        jLabel3.setText("How many:");

        countInclusions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countInclusionsActionPerformed(evt);
            }
        });

        btnStartMoore.setText("Start MOORE2");
        btnStartMoore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartMooreActionPerformed(evt);
            }
        });

        jLabel4.setText(" MOORE2 OPTIONS");

        jLabel5.setText("    IMG OPTIONS");

        jLabel6.setText("INCLUSIONS");

        btnBoundary.setText("Boundary");
        btnBoundary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoundaryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(379, 379, 379)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perecentMoore, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnImportPicture, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSavePicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnStartMoore, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .addComponent(btnStart, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbtnAbsorbing, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbtnVonNeumann, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rbtnMoore, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbtnPeriodic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tbxCount))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnRandom, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnRegular, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(countInclusions, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(rbtnCircle, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jbtnAfterInc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jbtnBeforeInc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBoundary, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(24, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tbxCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRandom)
                    .addComponent(jLabel3)
                    .addComponent(countInclusions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegular)
                    .addComponent(rbtnCircle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRadius)
                            .addComponent(jbtnBeforeInc))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnPeriodic)
                            .addComponent(jbtnAfterInc))
                        .addGap(3, 3, 3)
                        .addComponent(rbtnAbsorbing)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(rbtnVonNeumann)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtnMoore))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(btnBoundary)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(perecentMoore)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStartMoore))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSavePicture)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImportPicture)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomActionPerformed
        int count = Integer.parseInt(tbxCount.getText());

        for (int i = 0; i < count; i++) {
            array[rnd.nextInt(WIDTH - 1)][rnd.nextInt(HEIGHT - 1)] = new Color(rnd.nextInt(255), rnd.nextInt(255), rnd.nextInt(255));
        }
        ((PicturePanel) jPanel1).drawArray(array);
    }//GEN-LAST:event_btnRandomActionPerformed

    private void btnRegularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegularActionPerformed
        int count = Integer.parseInt(tbxCount.getText());
        int diff = WIDTH / count;

        for (int i = 0; i < WIDTH; i += diff) {
            for (int j = 0; j < HEIGHT; j += diff) {
                array[i][j] = new Color(rnd.nextInt(255), rnd.nextInt(255), rnd.nextInt(255));
            }
        }
        ((PicturePanel) jPanel1).drawArray(array);
    }//GEN-LAST:event_btnRegularActionPerformed

    private void btnRadiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRadiusActionPerformed
        int count = Integer.parseInt(tbxCount.getText());
        for (int i = 0; i < 50; i++) {
            int x = rnd.nextInt(WIDTH - 1);
            int y = rnd.nextInt(HEIGHT - 1);
            boolean flag = false;
            for (int j = x - count; j < x + count; j++) {
                if (j < 0 || j > WIDTH - 1 - 1) {
                    continue;
                }
                for (int k = y - count; k < y + count; k++) {
                    if (k < 0 || k > HEIGHT - 1 - 1) {
                        continue;
                    }
                    if (array[j][k] != Color.blue) {
                        flag = true;
                        break;
                    }
                }
                if (flag) {
                    break;
                }
            }
            if (!flag) {
                array[x][y] = new Color(rnd.nextInt(255), rnd.nextInt(255), rnd.nextInt(255));
            }
        }
        ((PicturePanel) jPanel1).drawArray(array);
    }//GEN-LAST:event_btnRadiusActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        
        BC bc;
        if (rbtnAbsorbing.isSelected()) {
            bc = new Absorbing();
        } else {
            bc = new Periodic();
        }

        Neighbourhood.Neighbourhood nb;
        if (rbtnVonNeumann.isSelected()) {
            nb = new VonNeumann(bc);
        } else {
            nb = new Moore(bc);
        }

        ng = new NaiveGrowth(nb);
        isThreadStarted = true;
        t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                while (isThreadAlive) {
                    if (isThreadStarted) {
                        try {
                            Color[][] tmp = new Color[WIDTH][HEIGHT];

                            for (int i = 0; i < WIDTH; i++) {
                                for (int j = 0; j < HEIGHT; j++) {
                                    tmp[i][j] = array[i][j];
                                }
                            }
                            
                            ng.growthStep(array, tmp);
                            ((PicturePanel)jPanel1).drawArray(array);
                            
                            if (!isAnyBlack()) {
                                isThreadStarted = false;
                            }
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }

            private boolean isAnyBlack() {
                for (int i = 0; i < WIDTH; i++) {
                    for (int j = 0; j < HEIGHT; j++) {
                        if (array[i][j] == Color.blue) {
                            return true;
                        }
                    }
                }
                return false;
            }
        });
        isThreadAlive = true;
        t1.start();
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        claerArray();
    }//GEN-LAST:event_btnClearActionPerformed


    private static void layoutRecursively(Component component) {
        component.doLayout();
        if (component instanceof Container) {
            Container container = (Container) component;
            for (int i = 0; i < container.getComponentCount(); i++) {
                layoutRecursively(container.getComponent(i));
            }
        }
    }
    
    private void btnSavePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePictureActionPerformed
        // TODO add your handling code here:
        
        layoutRecursively(jPanel1);
        BufferedImage bi = new BufferedImage(jPanel1.getWidth(), jPanel1.getHeight(), BufferedImage.TYPE_INT_RGB);
        jPanel1.paint(bi.getGraphics());
        File file = new File("test.png");
        try {
            ImageIO.write(bi, "png", file);
            Desktop.getDesktop().open(file);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_btnSavePictureActionPerformed

    
  class ImagePanel extends JPanel {
 
  private Image img;
 
  public ImagePanel(String img) {
    this(new ImageIcon(img).getImage());
  }
 
  public ImagePanel(Image img) {
    this.img = img;
    Dimension size = new Dimension(img.getWidth(null), img.getHeight(null));
    setPreferredSize(size);
    setMinimumSize(size);
    setMaximumSize(size);
    setSize(size);
    setLayout(null);
  }
 
  public void paintComponent(Graphics g) {
    g.drawImage(img, 0, 0, null);
  }
 
}
    
    private void btnImportPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportPictureActionPerformed
        
        ImagePanel panel = new ImagePanel(new ImageIcon("Images/test.png").getImage());
        jPanel1.add(panel);
        jPanel1.setVisible(true);
        //layoutRecursively(jPanel1);
        //((PicturePanel) jPanel1).drawArray(array);
    }//GEN-LAST:event_btnImportPictureActionPerformed

    
    
    
    
    //INKLUZJE
    static Random rand = new Random();
    
    public static Color[][] addInclusionsAtLimits(Color[][] tab, int sizeX, int sizeY, int inclusionCount, int size, boolean czyKolo) {

	int z = 0;

	while (z < inclusionCount) {
            int x = rand.nextInt(sizeX - 5) + 2;
            int y = rand.nextInt(sizeY - 5) + 2;
            if ((tab[x][y] != tab[x][y + 1] || tab[x][y] != tab[x][y - 1] || tab[x][y] != tab[x - 1][y] || tab[x][y] != tab[x + 1][y])
		&& (black != tab[x][y + 1] || black != tab[x][y - 1] || black != tab[x - 1][y] || black != tab[x + 1][y])) {
                    
                colorFields(tab, x, y, size, czyKolo);
                z++;
            }
	}
        
	return tab;
    }
    
    public static Color[][] addInclusions(Color[][] tab, int sizeX, int sizeY, int inclusionsCount, int size, boolean czyKolo) {
	int z = 0;
        
	while (z < inclusionsCount) {
            int x = rand.nextInt(sizeX - size) + size;
            int y = rand.nextInt(sizeY - size) + 5;
            colorFields(tab, x, y, size, czyKolo);
            z++;
	}
	
        return tab;
    }

    private static void colorFields(Color[][] tab, int x, int y, int size, boolean czyKolo) {
	if (czyKolo) {
            makeCircle(tab, x, y);
	} else {
            makeSquare(tab, x, y, size);
	}
    }
    
    private static void makeCircle(Color[][] tab, int x, int y) {
	if (tab[x][y] != black) {
            tab[x][y] = black;
            tab[x][y + 1] = black;
            tab[x][y - 1] = black;

            tab[x + 1][y] = black;
            tab[x - 1][y] = black;

            tab[x - 1][y + 1] = black;
            tab[x - 1][y + 2] = black;
            tab[x - 2][y + 1] = black;

            tab[x + 1][y - 1] = black;
            tab[x + 1][y - 2] = black;
            tab[x + 2][y - 1] = black;

            tab[x + 1][y + 1] = black;
            tab[x + 1][y + 2] = black;
            tab[x + 2][y + 1] = black;

            tab[x - 1][y - 1] = black;
            tab[x - 1][y - 2] = black;
            tab[x - 2][y - 1] = black;

            tab[x][y + 2] = black;
            tab[x][y - 2] = black;
            tab[x + 2][y] = black;
            tab[x - 2][y] = black;
	}
    }

    private static void makeSquare(Color[][] tab, int x, int y, int size) {
	if (tab[x][y] != black) {
            for (int i = x; i < x + 3; i++) {
		for (int j = y; j < y + 3; j++) {
                    tab[i][j] = black;
		}
            }
	}
    }
    
    
    private void countInclusionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countInclusionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_countInclusionsActionPerformed

    private void jbtnBeforeIncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBeforeIncActionPerformed
        // TODO add your handling code here:
        int countInclusion = Integer.parseInt(countInclusions.getText());
        int size = 2;
        Color[][] tmp2 = new Color[WIDTH][HEIGHT];
        boolean czyKolo;
        czyKolo = rbtnCircle.isSelected(); 
        
        for (int i = 0; i < countInclusion; i++) {
            tmp2 = addInclusions(array, WIDTH, HEIGHT, countInclusion, size, czyKolo);
        }
        
        ((PicturePanel) jPanel1).drawArray(tmp2);
    }//GEN-LAST:event_jbtnBeforeIncActionPerformed

    private void jbtnAfterIncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAfterIncActionPerformed
        // TODO add your handling code here:
        boolean czyKolo;
        czyKolo = rbtnCircle.isSelected();
        int countInclusion = Integer.parseInt(countInclusions.getText());
        int size = 2;
        Color[][] tmp3 = new Color[WIDTH][HEIGHT];
        
        for (int i = 0; i < countInclusion; i++) {
            //array[rnd.nextInt(WIDTH - 1)][rnd.nextInt(HEIGHT - 1)] = black;
            tmp3 = addInclusionsAtLimits(array, WIDTH, HEIGHT, countInclusion, size, czyKolo);
        }
        ((PicturePanel) jPanel1).drawArray(tmp3);
        
        
    }//GEN-LAST:event_jbtnAfterIncActionPerformed

    
    
    //MOORE
    
    public static Color[][] regCall3(Color[][] prev, int dimX, int dimY, boolean isPeriodic, int probability) {

	Color[][] current = new Color[dimX][dimY];

	for (int i = 0; i < dimX; i++) {
            arraycopy(prev[i], 0, current[i], 0, dimY);
	}

	for (int i = 1; i < dimX - 1; i++) {
            for (int j = 1; j < dimY - 1; j++) {
                if (prev[i][j] == Color.blue) {
                    int neighborsAmount = countNeighbors(prev, i, j);
                    if (neighborsAmount != 0) {
						
                    }

                    if (neighborsAmount >= 5) {
			current[i][j] = dominantColor;
                    } else if (isNearestMoore(prev, i, j)) {
			current[i][j] = dominantColor;
                    } else if (isFurtherMoore(prev, i, j)) {
			current[i][j] = dominantColor;
                    } else {
			int randomInt = rand.nextInt(100);
                        if (randomInt < probability) {
                            current[i][j] = dominantColor;
			}
                    }
		}
            }
	}
	
        return current;
    }
    
    private static boolean isNearestMoore(Color[][] prev, int i, int j) {
        int l, r, down, up;
        down = j - 1;
        up = j + 1;
        l = i - 1;
        r = i + 1;
        List<Color> nearestNeighborsList = new ArrayList<>();

        nearestNeighborsList.add(prev[l][j]);
        nearestNeighborsList.add(prev[i][down]);
        nearestNeighborsList.add(prev[r][j]);
        nearestNeighborsList.add(prev[i][up]);

        int z = 0;

        for (Color color : nearestNeighborsList) {
            if (color == dominantColor) {
                z++;
            }
            if (z >= 3) {
                return true;
            }
        }
        
        return false;
    }
    
    private static boolean isFurtherMoore(Color[][] prev, int i, int j) {
        int l, r, down, up;
        down = j - 1;
        up = j + 1;
        l = i - 1;
        r = i + 1;
        List<Color> furtherNeighborsList = new ArrayList<>();
        furtherNeighborsList.add(prev[l][down]);
        furtherNeighborsList.add(prev[r][down]);
        furtherNeighborsList.add(prev[l][up]);
        furtherNeighborsList.add(prev[r][up]);

        int z = 0;

        for (Color color : furtherNeighborsList) {
            if (color == dominantColor) {
                z++;
            }
            if (z >= 3) {
                return true;
            }
        }
        
        return false;
    }
    
    private static int countNeighbors(Color[][] prev, int i, int j) {
	int l, r, down, up;
	down = j - 1;
	up = j + 1;
	l = i - 1;
	r = i + 1;
	Set<Color> colorSet = new HashSet<>();
	List<Color> neighborsList = new ArrayList<>();
	colorSet.add(prev[l][down]);
	colorSet.add(prev[l][j]);
	colorSet.add(prev[i][down]);
	colorSet.add(prev[r][down]);
	colorSet.add(prev[l][up]);
	colorSet.add(prev[r][up]);
	colorSet.add(prev[r][j]);
	colorSet.add(prev[i][up]);
	colorSet.remove(Color.blue);
	neighborsList.add(prev[l][down]);
	neighborsList.add(prev[l][j]);
	neighborsList.add(prev[i][down]);
	neighborsList.add(prev[r][down]);
	neighborsList.add(prev[l][up]);
	neighborsList.add(prev[r][up]);
	neighborsList.add(prev[r][j]);
	neighborsList.add(prev[i][up]);

        if (colorSet.isEmpty()) {
            dominantColor = Color.blue;
            return 0;
	}
		
        int z = 0, max = 0;
        
	for (Color color : colorSet) {
            z = neighborsList.stream().filter((neighbor) -> (color == neighbor)).map((_item) -> 1).reduce(z, Integer::sum);
            if (z > max) {
                max = z;
		dominantColor = color;
            }
            
            z = 0;
	}
        
	return max;
    }
    
    private void btnStartMooreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartMooreActionPerformed
        // TODO add your handling code here:
        int countPercent = Integer.parseInt(perecentMoore.getText());
        boolean czyPeriodic;
        czyPeriodic = rbtnPeriodic.isSelected();
        
        BC bc;
        if (rbtnAbsorbing.isSelected()) {
            bc = new Absorbing();
        } else {
            bc = new Periodic();
        }

        Neighbourhood.Neighbourhood nb;
        if (rbtnVonNeumann.isSelected()) {
            nb = new VonNeumann(bc);
        } else {
            nb = new Moore(bc);
        }

        
        isThreadStarted = true;
        t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                while (isThreadAlive) {
                    if (isThreadStarted) {
                        try {
                            Color[][] tmp = new Color[WIDTH][HEIGHT];

                            for (int i = 0; i < WIDTH; i++) {
                                for (int j = 0; j < HEIGHT; j++) {
                                    tmp[i][j] = array[i][j];
                                }
                            }
                            
                            array = regCall3(array, WIDTH, HEIGHT, czyPeriodic, countPercent);
                            
                            ((PicturePanel) jPanel1).drawArray(array);
                            if (!isAnyBlue()) {
                                isThreadStarted = false;
                            }
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }

            private boolean isAnyBlue() {
                for (int i = 0; i < WIDTH; i++) {
                    for (int j = 0; j < HEIGHT; j++) {
                        if (array[i][j] == Color.blue) {
                            return true;
                        }
                    }
                }
                return false;
            }
        });
        isThreadAlive = true;
        t1.start();
        
    }//GEN-LAST:event_btnStartMooreActionPerformed

   
    //BOUNDARY
    public static List<Color> getMooreNeighbors(Color[][] tab, int i, int j) {

	int l, r, down, up;
	down = j - 1;
	up = j + 1;
	l = i - 1;
	r = i + 1;

	List<Color> neighborsList = new ArrayList<>();
	neighborsList.add(tab[l][down]);
	neighborsList.add(tab[l][j]);
	neighborsList.add(tab[i][down]);
	neighborsList.add(tab[r][down]);
	neighborsList.add(tab[l][up]);
	neighborsList.add(tab[r][up]);
	neighborsList.add(tab[r][j]);
	neighborsList.add(tab[i][up]);
        
	return neighborsList;
    }
    
    
    private boolean isGrainInBorder(int i, int j) {
	List<Color> neighb = getMooreNeighbors(array, i, j);

	Color baseColor = neighb.get(0);
        if (neighb.stream().anyMatch((color) -> (color != baseColor))) {
            return true;
        }
        
	return false;
    }
    
    
    private void distrubuteBC(int bcInBorders) {

	bC = new int[WIDTH ][HEIGHT];

	for (int i = 1; i < WIDTH - 1; i++) {
            for (int j = 1; j < HEIGHT - 1; j++) {
		if (isGrainInBorder(i, j)) { 
                    bC[i][j] = bcInBorders;
                }
            }
	}
    }
   
    private void btnBoundaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoundaryActionPerformed
        // TODO add your handling code here:
        int[][] BC = null;
        
        int bcInBorders = 5;
        distrubuteBC(bcInBorders);
        BC = bC;

	Color[][] boundary = new Color[WIDTH][HEIGHT];

	for (int i = 0; i < WIDTH; i++) {
            for (int j = 0; j < HEIGHT; j++) {
		boundary[i][j] = new Color(  1 * BC[i][j],  20 * BC[i][j], 0);         
            }
	}
	
        ((PicturePanel)jPanel1).drawArray(boundary);
    }//GEN-LAST:event_btnBoundaryActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup boundaryConditions;
    private javax.swing.JButton btnBoundary;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnImportPicture;
    private javax.swing.JButton btnRadius;
    private javax.swing.JButton btnRandom;
    private javax.swing.JButton btnRegular;
    private javax.swing.JButton btnSavePicture;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStartMoore;
    private javax.swing.JTextField countInclusions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtnAfterInc;
    private javax.swing.JButton jbtnBeforeInc;
    private javax.swing.ButtonGroup neighbourhood;
    private javax.swing.JTextField perecentMoore;
    private javax.swing.JRadioButton rbtnAbsorbing;
    private javax.swing.JRadioButton rbtnCircle;
    private javax.swing.JRadioButton rbtnMoore;
    private javax.swing.JRadioButton rbtnPeriodic;
    private javax.swing.JRadioButton rbtnVonNeumann;
    private javax.swing.JTextField tbxCount;
    // End of variables declaration//GEN-END:variables

    private void claerArray() {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[0].length; j++) {
                array[i][j] = Color.blue;
            }
        }
        ((PicturePanel) jPanel1).drawArray(array);
    }
}

class Punkt {
	public int x;
	public int y;

	Punkt(int p_x, int p_y) {
		x = p_x;
		y = p_y;
	}

	@Override
	public String toString() {
		return "Punkt [x=" + x + ", y=" + y + "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		Punkt p = (Punkt) obj;
		return p.x == x && p.y == y;
	}
    private static final Logger LOG = Logger.getLogger(Punkt.class.getName());
}